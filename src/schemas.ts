import { z } from "zod";
import { Str, Num } from "chanfana"; // Assuming Str, Num might be needed if schemas evolve

// Placeholder ProblemDetails schema
export const ProblemDetailsSchema = z.object({
  type: z.string().url().optional().describe("A URI reference [RFC3986] that identifies the problem type."),
  title: z.string().describe("A short, human-readable summary of the problem type."),
  status: z.number().int().describe("The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem."),
  detail: z.string().optional().describe("A human-readable explanation specific to this occurrence of the problem."),
  instance: z.string().url().optional().describe("A URI reference that identifies the specific occurrence of the problem."),
}).describe("Problem Details Schema (RFC 7807)");

export const BalloonSchema = z.object({
    fillStatus: Num({ description: "Fill status of the balloon" })
}).describe("Balloon Resource");

export const UserStatisticsSchema = z.object({
  userName: Str({ description: "Username of user" }),
  hits: Num({ description: "Number of times the user has successfully filled the balloon" }),
  misses: Num({ description: "Number of times the user has missed the balloon or been rate limited" }),
  total: Num({ description: "Total number of times the user has tried to fill the balloon" }),
  lastHit: Str({ description: "Timestamp of the last successful balloon inflation" }),
  lastMiss: Str({ description: "Timestamp of the last ETag mismatch or other non-success before rate limit" }),
  
  // Dynamic interval rate limiting fields (initialRateLimitPerMinute moved to be a server-side constant)
  violationFactor: z.number().default(1.0).describe("Factor applied to the base interval, increases with violations"),
  lastChangeRequestDate: Str({ default: new Date(0).toISOString(), description: "Timestamp of the last PUT request attempt (good or bad)" }),

  // Deprecated/Removed fields from previous rate limiting model
  // initialRateLimitPerMinute: Num({ default: 6, description: "Base number of PUTs permitted per minute for interval calculation" }),
  // currentRateLimitPerMinute: Num({ description: "Permitted number of PUTs per minute" }),
  // lastRateLimitViolation: Str({ description: "Timestamp of the last rate limit violation" }),
  // hitsForRateRestoration: Num({ description: "Number of hits since the last rate limit violation" }),
}).describe("User Statistics Resource");

export const UserStatisticsListSchema = z.object({
  items: z.array(UserStatisticsSchema).describe("List of User Statistics resources"),
}).describe("List of User Statistics resources"); 